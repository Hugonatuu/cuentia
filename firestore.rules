/**
 * @file Firebase Security Rules for Cuentia Application
 *
 * @core-philosophy This ruleset enforces a strict user-ownership model for user-generated content (stories, characters)
 * while allowing public read access to user profiles. Subscriptions are publicly accessible.
 *
 * @data-structure The data is organized hierarchically:
 *   - /users/{userId}: Contains public user profile information.
 *   - /users/{userId}/stories/{storyId}: Contains stories created by the user.
 *   - /users/{userId}/characters/{characterId}: Contains characters created by the user.
 *   - /subscriptions/{subscriptionId}: Contains subscription plan details.
 *
 * @key-security-decisions
 *   - User profiles are publicly readable but only writable by the owning user.
 *   - Stories and characters are strictly owned by the user who created them.
 *   - Subscriptions are publicly readable and not writable through the client (admin only).
 *   - Listing of user documents, stories, and characters is allowed by the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents. Users can read all profiles, but can only
     * create or modify their own.
     * @path /users/{userId}
     * @allow (get, list): Anyone can read user profiles.
     * @allow (create, update, delete): Only the user with the matching UID can modify their own profile.
     * @deny create: if the user attempts to create a profile with a different user ID.
     * @deny update: if the user attempts to change their user ID.
     * @principle Enforces document ownership for writes, public read access for profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to stories created by a user. Only the owning user can create, read, update, or delete their stories.
     * @path /users/{userId}/stories/{storyId}
     * @allow (get, list): Only the owner of the stories can read and list them.
     * @allow (create, update, delete): Only the owner can create, update, and delete stories.
     * @deny create: if the userId in the path does not match the authenticated user's ID.
     * @deny update: if a non-owner attempts to modify a story or if the story doesn't exist.
     * @principle Enforces strict user-ownership for story data.
     */
    match /users/{userId}/stories/{storyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/stories/$(storyId));
        }

        allow get, list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to characters created by a user. Only the owning user can create, read, update, or delete their characters.
     * @path /users/{userId}/characters/{characterId}
     * @allow (get, list): Only the owner of the characters can read and list them.
     * @allow (create, update, delete): Only the owner can create, update, and delete characters.
     * @deny create: if the userId in the path does not match the authenticated user's ID.
     * @deny update: if a non-owner attempts to modify a character or if the character doesn't exist.
     * @principle Enforces strict user-ownership for character data.
     */
    match /users/{userId}/characters/{characterId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/characters/$(characterId));
        }

        allow get, list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to subscription plans.  These are considered public and read-only.
     * @path /subscriptions/{subscriptionId}
     * @allow get, list: if true; // Anyone can read subscription plans.
     * @deny create, update, delete: if false; // No client-side writes allowed.
     * @principle Public read access for subscription data, no client-side writes.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}