/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (stories, characters),
 * ensuring that only the authenticated user can create, modify, or delete their own data. Public read
 * access is granted to predefined characters and subscription plans.  User listing is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/characters/{characterId}: Stores characters created by the user.
 * - /users/{userId}/stories/{storyId}: Stores stories created by the user.
 * - /subscriptions/{subscriptionId}: Stores subscription plans (publicly readable).
 * - /predefinedCharacters/{characterId}: Stores predefined characters (publicly readable).
 *
 * Key Security Decisions:
 * - User profiles are created with limited public information on account creation, and owner-only update access.
 * - Stories and Characters are strictly owned by the user who created them.
 * - Listing user documents is disallowed to prevent data leakage.
 * - Predefined characters and subscription plans are publicly readable but not writable by clients.
 *
 * Denormalization for Authorization:
 * - Stories have a `userId` field to enable owner-based security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data. Allows creating profile only for the user who matches the `userId` in the path.
     * @path /users/{userId}
     * @allow (create) - User `UhKTI3M3w7eBQUssL8MFcV6V42y1` can create a profile with `userId` equal to `UhKTI3M3w7eBQUssL8MFcV6V42y1`.
     * @allow (get, update, delete) - Only if the user owns the profile (authenticated user ID matches the `userId` in the path).
     * @deny (create) - If the authenticated user ID does not match the `userId` in the path.
     * @principle Enforces document ownership for writes, allows reading a user's own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false; // Disallowing listing for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Enforces user-ownership for stories. Only the authenticated user can create, update, or delete their own stories.
      * @path /users/{userId}/stories/{storyId}
      * @allow (create) - User `UhKTI3M3w7eBQUssL8MFcV6V42y1` can create a story under their `userId`.
      * @allow (get, list, update, delete) - Only if the user owns the story (authenticated user ID matches the `userId` in the path).
      * @deny (create) - If the authenticated user ID does not match the `userId` in the path.
      * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
      */
    match /users/{userId}/stories/{storyId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == storyId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces user-ownership for characters. Only the authenticated user can create, update, or delete their own characters.
     * @path /users/{userId}/characters/{characterId}
     * @allow (create) - User `UhKTI3M3w7eBQUssL8MFcV6V42y1` can create a character under their `userId`.
     * @allow (get, list, update, delete) - Only if the user owns the character (authenticated user ID matches the `userId` in the path).
     * @deny (create) - If the authenticated user ID does not match the `userId` in the path.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/characters/{characterId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to subscription plans. No write access is allowed for clients.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) - Any user can read subscription plans.
     * @deny (create, update, delete) - No client-side write operations allowed.
     * @principle Provides public information about subscription plans.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to predefined characters. No write access is allowed for clients.
     * @path /predefinedCharacters/{characterId}
     * @allow (get, list) - Any user can read predefined characters.
     * @deny (create, update, delete) - No client-side write operations allowed.
     * @principle Provides public information about available characters.
     */
    match /predefinedCharacters/{characterId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}