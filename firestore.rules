/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content
 * (stories, characters), ensuring that only the authenticated user who created
 * the content can modify or delete it. Public read access is granted where
 * appropriate (e.g., predefined characters, community stories).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the user can write
 *   to their own profile.  Read access is public.
 * - /users/{userId}/stories/{storyId}: Stores stories created by the user.
 *   Only the user can manage their own stories.
 * - /users/{userId}/characters/{characterId}: Stores characters created by the user.
 *   Only the user can manage their own characters.
 * - /subscriptions/{subscriptionId}: Stores subscription plans. Read access is
 *   public, write access is restricted.
 * - /predefinedCharacters/{characterId}: Stores predefined characters. Read
 *   access is public, write access is restricted.
 * - /communityStories/{storyId}: Stores community stories. Read access is
 *   public, write access is restricted.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and their associated
 *   stories and characters.
 * - Listing of user profiles is implicitly denied via the security rules structure.
 * - Subscription plans, predefined characters, and community stories are
 *   publicly readable but not writable by end-users.
 *
 * Denormalization for Authorization:
 * - Stories and characters are stored under the user's document. To create simpler, more performant rules, denormalize (copy) data required for an authorization decision directly onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can read all profiles, but only write their own.
     * @path /users/{userId}
     * @allow (create, update, delete) auth.uid == userId (isOwner)
     * @allow (get, list) public read
     * @deny (create, update, delete) if auth.uid != userId
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure stories created by each user. Only the owner can manage their stories.
     * @path /users/{userId}/stories/{storyId}
     * @allow (create, update, delete) auth.uid == userId (isOwner)
     * @allow (get, list) if isOwner(userId);
     * @deny (create, update, delete) if auth.uid != userId
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId}/stories/{storyId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure characters created by each user. Only the owner can manage their characters.
     * @path /users/{userId}/characters/{characterId}
     * @allow (create, update, delete) auth.uid == userId (isOwner)
     * @allow (get, list) if isOwner(userId);
     * @deny (create, update, delete) if auth.uid != userId
     * @principle Enforces document ownership for writes, restricts read access to the owner.
     */
    match /users/{userId}/characters/{characterId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Subscription plans are publicly readable, but not writable by end-users.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) public read
     * @deny (create, update, delete) end-user writes
     * @principle Allows public reads, restricts writes.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Predefined characters are publicly readable, but not writable by end-users.
     * @path /predefinedCharacters/{characterId}
     * @allow (get, list) public read
     * @deny (create, update, delete) end-user writes
     * @principle Allows public reads, restricts writes.
     */
    match /predefinedCharacters/{characterId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Community stories are publicly readable, but not writable by end-users.
     * @path /communityStories/{storyId}
     * @allow (get, list) public read
     * @deny (create, update, delete) end-user writes
     * @principle Allows public reads, restricts writes.
     */
    match /communityStories/{storyId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    //------------------- Helper functions -----------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the request is made by the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}